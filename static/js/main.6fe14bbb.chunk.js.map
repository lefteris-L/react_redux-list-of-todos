{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/Loader/Loader.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","payload","type","currentTodoReducer","state","action","initialState","query","status","filterReducer","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useAppDispatch","useDispatch","useAppSelector","useSelector","Loader","className","TodoList","setTodo","removeTodo","dispatch","filteredTodos","title","completed","hasQuery","RegExp","trim","test","hasStatus","toggleCurrentTodo","todo","id","length","map","cn","onClick","TodoFilter","setStatus","setQuery","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","style","pointerEvents","TodoModal","useState","isLoading","setLoading","name","email","setUser","userId","useEffect","getUser","finally","href","App","setTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fe14bbb.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (payload: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default: return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterByQueryAction = {\n  type: 'query/SET',\n  payload: string,\n};\n\ntype FilterByStatusAction = {\n  type: 'status/SET',\n  payload: Status,\n};\n\nconst setQuery = (payload: string): FilterByQueryAction => ({\n  type: 'query/SET',\n  payload,\n});\n\nconst setStatus = (payload: Status): FilterByStatusAction => ({\n  type: 'status/SET',\n  payload,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Action = FilterByQueryAction | FilterByStatusAction;\ntype State = {\n  query: string\n  status: Status\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n\n    default: return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (payload: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default: return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import cn from 'classnames';\nimport { actions } from '../../features/currentTodo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const { todos, currentTodo, filter } = useAppSelector(state => state);\n  const { query, status } = filter;\n  const { setTodo, removeTodo } = actions;\n  const dispatch = useAppDispatch();\n\n  const filteredTodos = todos.filter(({ title, completed }) => {\n    const hasQuery = RegExp(query.trim(), 'i').test(title);\n    let hasStatus = true;\n\n    if (status === 'active') {\n      hasStatus = !completed;\n    }\n\n    if (status === 'completed') {\n      hasStatus = completed;\n    }\n\n    return hasQuery && hasStatus;\n  });\n\n  const toggleCurrentTodo = (todo: Todo) => () => {\n    if (currentTodo?.id === todo.id) {\n      dispatch(removeTodo());\n    } else {\n      dispatch(setTodo(todo));\n    }\n  };\n\n  return (\n    <>\n      {filteredTodos.length\n        ? (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {filteredTodos.map(todo => (\n                <tr data-cy=\"todo\" key={todo.id}>\n                  <td className=\"is-vcentered\">{todo.id}</td>\n\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={cn({\n                        'has-text-success': todo.completed,\n                        'has-text-danger': !todo.completed,\n                      })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={toggleCurrentTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={cn('far', {\n                            'fa-eye': !todo.completed,\n                            'fa-eye-slash': todo.completed,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )\n        : (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n    </>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const { setStatus, setQuery } = actions;\n  const dispatch = useAppDispatch();\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={e => dispatch(setStatus(e.target.value as Status))}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={e => dispatch(setQuery(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => dispatch(setQuery(''))}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setLoading] = useState(true);\n  const [{ name, email }, setUser] = useState<User>({} as User);\n  const { removeTodo } = actions;\n  const dispatch = useAppDispatch();\n\n  const {\n    title,\n    id,\n    completed,\n    userId,\n  } = useAppSelector(({ currentTodo }) => currentTodo as Todo);\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n                <a href={`mailto:${email}`}>{name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useEffect, useState } from 'react';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\n\nimport { Loader } from './components/Loader';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setLoading] = useState(false);\n  const { setTodos } = actions;\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then(todos => dispatch(setTodos(todos)))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}